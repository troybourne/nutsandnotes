// Visual Micro is in vMicro>General>Tutorial Mode
// 
/*
	Name:       ShearSeparatePortsProject.ino
	Created:	4/1/2019 12:50:28 PM
	Author:     ACORN\TROY
*/

// Define User Types below here or use a .h file
#include "IRremote.h"
//

// Define Function Prototypes that use User Types below here or use a .h file
void IR();
void EStop();
void exitingEStop();
void forwardChain();
void reverseChain();
void stopChain();
void carriageToStack();
void carriageToConveyor();
void stopBridge();
void stopBridgeAtConveyor();
void stopBridgeAtStack();
void raiseCarriage();
void lowerCarriage();
void leftVacActivate();
void rightVacActivate();
void activateBothVacs();
void verifyBothVacs();
void releaseBothVac();
void autoCarriageToConveyor();
void autoCarriageToStack();
void pusherCanRaiseFlagL();
void pusherCanRaiseFlagR();
void pusherStateMachine();
void autoPusherStateMachine();
void autoPusherStateMachine2();
void getSteel();
void deliverSteel();
//void releaseAndRaise(); // autoPusher will repeatedly call this, if()'s to release and raise, return to autoPusherStateMachine until retraction
void determineCarriageState();
void carriageStateMachine();
void bumpChain();
void outFeederOn();
void outFeederOff();
void pinChangePrintStatement();
void initializeOutputs();
//End Prototypes here


// Define Functions below here or use other .ino or cpp files
#define VERIFY_CARRIAGE_INCLUDED 0
#define DROP_PUSHER 1
#define EXTEND_PUSHER 2
#define VERIFY_EXTENDED_AND_CARRIAGE_UP 3
#define RETRACT_PUSHERS 4
#define RAISE_PUSHERS 5
#define HOME_AND_VERIFY_PUSHERS 6

#define FORWARD_CHAIN 0
#define STOP_CHAIN 1
#define REVERSE_CHAIN 2
#define AUTOPUSHER_STOPPED_CHAIN 3

// Mode States   determines which vacuum values allow for carriage state to function
#define FULL_AUTO 1
#define HALF_AUTO_LEFT 2
#define HALF_AUTO_RIGHT 3
#define MANUAL 4

#define LANDED 1
#define VACS_DEACTIVATED 2
#define RAISED 3




//Declarations here...

int pusherState = 0;
int carriageState = 0;
bool pusherCanRun = 0;
bool pusherCanRunTracker = 1;
bool leftRetractTripped = 0;
bool rightRetractTripped = 0;
bool carriageIncludedWithPushers = 0; // variable to determine if steel was ready to drop with pushers
int pusherCanRunDelay = 2500; // delay to prevent restarting pusherStateMachine because of chainPosSensor
unsigned long forwardChainInvokedTime = 0;
unsigned long reverseChainInvokeTime = 0;
unsigned long lastReverseChainInvokeTime = 0;
unsigned long chainDelay = 1500;
int chainPosSensor = 4;    //this was pin 4 now interrupt on pin 21
int eStopLight = 9;
int halfLoadedLight = 8;
int fullAutoLight = 7;
int returnStatePinReadC = 0;
int returnStatePinReadK = 0;
unsigned long bridgeStopDelay = 1500;
unsigned long intializeStopBridge = 0;
int carriageAtConveyor = 18;
int carriageAtStack = 19;
int carriageAtTop = 38;
bool eStopPin = PINB & (1 << 7);
//bool chainSensorPin = PING & (1 << 5); //digital pin 4
int chainSensorPin = 4;
int getSteelState = 0;
int vacVerified = 0;
bool leftVacVerified = 0;
bool rightVacVerified = 0;
int lastPinA = 0;
int lastPinB = 0;
int lastPinC = 0;
int lastPinD = 0;
int lastPinE = 0;
int lastPinF = 0;
int lastPinG = 0;
int lastPinH = 0;
int lastPinJ = 0;
int lastPinK = 0;
//int sumPinAPinJ = 0;
int mode = 0; // 0 limited manual due to steel; 1 chosen manual mode from remote; 2 auto mode
int lastMode = 0;
int releaseAndRaise = 0;


int receiver = 5; // pin 1 of IR receiver to Arduino digital pin 5
IRrecv irrecv(receiver); // create instance of 'irrecv'
decode_results results; // create instance of 'decode_results'
//END DECLARATIONS HERE

//functions here
void initializeOutputs() {
	Serial.println("initialize outputs reached");
	for (int init = 0; init <= 0; init++) {
		PORTC = PORTC & B11101111;  // outfeed run
		if (PIND >= 128) {
			raiseCarriage();
			Serial.println("carriage is up");
		}
		if (PINA == 240 || PINA == 248 || PINA == 244 || PINA == 252) {
			activateBothVacs();
			Serial.println("carriage is loaded with both steel");
		}
		if (PINA >= 64 && PINA <= 128) {
			rightVacActivate();
			Serial.println("only steel on right Carriage");
		}
		if (PINA >= 128 && PINA < 192) {
			leftVacActivate();
			Serial.println("only steel on left Carriage");
		}
	}
}   // THIS ONLY RUNS DURING SETUP OR RESET
void pinChangePrintStatement() { // only to see changes in Serial window
	if (PINA != lastPinA){
		lastPinA = PINA;
		Serial.print("PinA changed to .....");
	Serial.println(PINA);
	}
	if (PINB != lastPinB) {
		lastPinB = PINB;
		Serial.print("PinB changed to .....");
		Serial.println(PINB);
	}
	if (PINC != lastPinC) {
		lastPinC = PINC;
		Serial.print("PinC changed to .....");
		Serial.println(PINC);
	}
	if (PIND != lastPinD) {
		lastPinD = PIND;
		Serial.print("PinD changed to .....");
		Serial.println(PIND);
	}
	if (PINF != lastPinF) {
		lastPinF = PINF;
		Serial.print("PinF changed to .....");
		Serial.println(PINF);
	}
	if (PING != lastPinG) {
		lastPinG = PING;
		Serial.print("PinG changed to .....");
		Serial.println(PING);
	}
	if (PINH != lastPinH) {
		lastPinH = PINH;
		Serial.print("PinH changed to .....");
		Serial.println(PINH);
	}
	if (PINJ != lastPinJ) {
		lastPinJ = PINJ;
		Serial.print("PinJ changed to .....");
		Serial.println(PINJ);
	}
	if (PINK != lastPinK) {
		lastPinK = PINK;
		Serial.print("PinK changed to .....");
		Serial.println(PINK);
	}
	if (lastMode != mode) {
		lastMode = mode;
		Serial.print("Mode changed to ................");
		Serial.println(mode);
	}
	if (pusherCanRun != pusherCanRunTracker) {
		Serial.print("Pusher can run =  ");
		Serial.println(pusherCanRun);
		pusherCanRunTracker = !pusherCanRunTracker;
		//if (pusherCanRunTracker == 0) {
			//pusherCanRunTracker = 1;
		//}
		//else {
			//pusherCanRunTracker = 
		//}
	}
	//ifSerial.print(pusherState);
}
void EStop() {
	{
		returnStatePinReadC = (PINC);  //saves state of motors, relays for returning after EStop
		returnStatePinReadK = (PINK);  //saves state of motors, relays for returning after EStop
		PORTC = B01111111; // EStop relay engaged
		PORTK = PORTK | B01100000; // Stop forward or reverse bridge motor
		//PORTD = B10000000; // EStop beacon LIT
		digitalWrite(eStopLight, HIGH);
		while (PINB < 128) {
			Serial.println("EStop hard button entered EStop Mode");
			Serial.println(PINL);
		}
		while (PINB >= 128) {
			Serial.println("EStop remote button exiting EStop Mode");
			//PORTD = B00000000; // EStop beacon out for exitingEStop flashing
			digitalWrite(eStopLight, LOW);
			Serial.println("breaking out of EStop");
			exitingEStop();
			return;
		}
	}
}
void exitingEStop() {
	//PORTD = B10000000;
	digitalWrite(eStopLight, HIGH);
	delay(25);
	Serial.println("hard e stop reached");
	Serial.println(PINL);
	while ((PINB) < 128) {
		Serial.println("waiting for e-stop reset button to be engaged pressed");
		delay(10);
		Serial.println(PINL);
		delay(15);
	}
	while ((PINB) >= 128) {
		Serial.println("waiting for e-stop reset button to be released pulled");
		Serial.println(PINL);
		delay(15);
	}
	Serial.println("exiting E Stop mode");
	//below for loop can display strobe and beeper for exiting EStop mode notification
	for (int i = 0; i <= 10; i++) {
		//PORTD = B10000000;
		digitalWrite(eStopLight, HIGH);
		delay(250);
		//PORTD = B00000000;
		digitalWrite(eStopLight, LOW);
		delay(250);
	}
	PORTC = returnStatePinReadC;
	PORTK = returnStatePinReadK;
	return;
}
void outFeederOn() {
	PORTC = PORTC | B11101111;
	return;
}
void outFeederOff() {
	PORTC = PORTC & B00010000;
	return;
}
void forwardChain() {
	PORTC = PORTC | B00001100;
	PORTC = PORTC & B11111011;
	//forwardChainInvokedTime = millis();
	//while (millis() - forwardChainInvokedTime <= pusherCanRunDelay) {
	//	Serial.println("waiting for millis delay");
	//}
	if (pusherCanRun == 0) {
		pusherCanRun = 1;
	}
	
	return;
}
void reverseChain() { // make this only work in manual mode and put a stop and short millis delay
	//if (PINB == 112 || PINB == 80 || PINB == 16 || PINB == 113 || PINB == 81 || PINB == 17) { //only in manual modes per PINB
		//PORTC = PORTC & B11110111;
	PORTC = PORTC | B00001100;
		while ((millis() - reverseChainInvokeTime) <= chainDelay) {
			PORTC = PORTC & B11110111;
			if (irrecv.decode(&results)) // have we received an IR signal?
			{
				//Serial.print(F("result = 0x"));
				//Serial.println(results.value, HEX); //UN Comment to see raw values
				if (results.value == 0x449E79F || results.value == 0xFF5AA5 || results.value == 0xFF5AA || results.value == 0xFFFFFFFF) { //the stupid 3 values for Rev Chain
					reverseChainInvokeTime = millis();
					Serial.println("found a repeated or new reverse keypress ");
					irrecv.resume();
				}
				//reverseChainInvokeTime == millis();
				//irrecv.resume(); // receive the next value
			}
		}
		reverseChainInvokeTime = 0;
	PORTC = PORTC | B00001100;
	//PORTC = PORTC & B11110111;
	pusherCanRun = 1;
	return;
}
void stopChain() {
	//PORTC = PORTC | B00001100;
	if (pusherCanRun == 1) {
		Serial.println("entering pusherStateMachine");
		autoPusherStateMachine();
	}
	PORTC = PORTC | B00001100;
	//delay(750);
	return;
}
void carriageToStack() {
	if (PIND < 128 || PIND == 132 || PIND == 133) {// if not up OR already at stack OR 
		return;
	}
	if (PINK >= 71 && PINK <= 95) { // this should be if the carriage is headed to the stack pause first
		Serial.println("millis change direction delay");
		intializeStopBridge = millis();
		while (millis() - intializeStopBridge < bridgeStopDelay) {
			PORTK = PORTK | B00100000;
		}
	}
		PORTK = PORTK & B10111111;
		return;
	}
void carriageToConveyor() {
	if (PIND < 128 || PIND == 136 || PIND == 137) {
		return;
	}
	if (PINK >= 39 && PINK <= 63) { // this should be if the carriage is headed to the stack pause first  71 95
		Serial.println("millis change direction delay");
		intializeStopBridge = millis();
		while (millis() - intializeStopBridge < bridgeStopDelay) {
			PORTK = PORTK | B01000000;
		}
	}
	PORTK = PORTK & B11011111;
	return;
}
void stopBridge() {
	PORTK = PORTK | B01100000;
	return;
}
void stopBridgeAtConveyor() {
	PORTK = PORTK | B00100000;
	return;
}
void stopBridgeAtStack() {
	PORTK = PORTK | B01000000;
	return;
}
void raiseCarriage() {
	PORTK = PORTK & B01111111;
	return;
}
void lowerCarriage() {
	PORTK = PORTK | B10000000;
	return;
}
void leftVacActivate() {
	PORTK = PORTK & B11101111;
	return;
}
void rightVacActivate() {
	PORTK = PORTK & B11110111;
	return;
}
void activateBothVacs() {
	Serial.println("Activating both vacs");
	PORTK = PORTK & B11100111;
}
void verifyBothVacs() {
	if (PINA >= 192) {
		vacVerified = 2;  //2 moves forward with FULL vac establish
		return;
	}
	if (PINA > 128) {
		vacVerified = 1;
		leftVacVerified = 1;
		return;
	}
	if (PINA < 64) {
		vacVerified = 0;
		leftVacVerified = 0; //1 moves forward with Left HALF vac estab
		rightVacVerified = 0; //1 moves forward with RIGHT HALF vac estab
		return;
	}
	if (PINA > 63 && PINA < 128) {
		vacVerified = 1;
		rightVacVerified = 1;
		return;
	}
	return;
}
//appropriately releases both vacuums
void releaseBothVac() {
	//if (PIND <= 128) {
	PORTK = PORTK | B00011000;
	//return;
	//}
	return;
}
//appropriately sends carriage to conveyor
void autoCarriageToConveyor() {
	if (PIND == 128 || PIND == 132 || PIND == 129 || PIND == 133) {
		if (PINA >= 64) {
			//PORTK = PORTK | B10000000;
			//PORTD = B00001000;
			PORTK = PORTK & B11011111; //carriage to conveyor
			return;
		}
		getSteel();
	}
	return;
}
void autoCarriageToStack() {
	if (PINA == 128 || PINA == 136) {
		Serial.println("auto carriage to stack");
		if (PORTK == B00111111) {
			return;
		}
		stopBridge();
		PORTK = PORTK | B00111000;
		PORTK = PORTK & B00111111;
		return;
	}
	//return; //***************************************
}
void pusherCanRaiseFlagL() {
	leftRetractTripped = 1;
	return;
}
void pusherCanRaiseFlagR() {
	rightRetractTripped = 1;
	return;
}
/*
void releaseAndRaise() {
	if (PINA == 92 || PINA == 84 || PINA == 168 || PINA == 172 || PINA == 252) {
		releaseBothVac();
		return;
	}
	if (PINA < 16) {
		pusherState++;
		return; // or maybe autoPusherStateMachine()????
	}
	if (PINA < 64) {
		raiseCarriage();
		return;
	}
	else {
		Serial.println("raise and release no condition met");
		return;
	}
}
*/
void pusherStateMachine() {

}
void carriageWithPushers() {

	if (PINA == 84 || PINA == 92 || PINA == 168 || PINA == 172 || PINA == 252) { //has vacuum and down
		releaseAndRaise = 1;
		Serial.println("release and raise = 1");
	}
	if (PINA < 15) { //empty carriage rising
		releaseAndRaise = 3;
		Serial.println("release and raise = 3");
	}
	if (PINA > 15 && PINA < 64) {
		releaseAndRaise = 2;
		Serial.println("release and raise = 2");
	}
	else {
		releaseAndRaise = 0;
		Serial.println("release and raise = 0");
	}

	switch (releaseAndRaise)
	{
	case 0:
		carriageIncludedWithPushers = 0;
		break;
	case LANDED:// 1
		releaseBothVac();
		break;
	case VACS_DEACTIVATED:// 2
		raiseCarriage();
		break;
	case RAISED://3 
		carriageIncludedWithPushers = 0;
		break;
	}
	autoPusherStateMachine();
}
void autoPusherStateMachine() {

	switch (pusherState)
	{
		Serial.println("switch statements reached");
	case VERIFY_CARRIAGE_INCLUDED: // 0
		if (pusherCanRun == 0) {
			return; // exits autoPusherStateMachine
		}
		if ((PIND == 136 || PIND == 137) && PINA > 64) {//if up at conv and loaded at all
			lowerCarriage();
			PORTC = PORTC | B00001100; //stop chains
			carriageIncludedWithPushers = 1;
			pusherState = 1; //DROP PUSHER
		}
		else {
			carriageIncludedWithPushers = 0;
			PORTC = PORTC | B00001100;//stop chains forward or reverse
			pusherState = 1;
		}
	case DROP_PUSHER: // 1
		Serial.println("DROP PUSHERS REACHED DROP PUSHERS REACHEDDROP PUSHERS REACHED DROP PUSHERS REACHED DROP PUSHERS REACHEDDROP PUSHERS REACHED ");
		PORTC = PORTC & B11111110; //drop valve triggered
		while (PINL != 60) {
			}
		pusherState = 2;
	case EXTEND_PUSHER:
		Serial.println("extend pushers reached");
		PORTC = PORTC & B11111100; //extend pushers
		Serial.print("Pushers are Extending... Pushers are Extending");
		while (PINL != 48) {  //until full extension occurs
			if (PINA == 84 || PINA == 92 || PINA == 168 || PINA == 172 || PINA == 252) { //has vacuum and down
				releaseBothVac();
				Serial.println("vacuums released");
			} //looking for carriage to be down
			if (PINA < 64) {
				raiseCarriage();
				Serial.println("carriage is raising");
			}
			if (irrecv.decode(&results)) // have we received an IR signal?
			{
				Serial.println(results.value);
				if (results.value == 0xF076C13B) {
					pusherState + 2;
					PORTC = PORTC | B00000010;
					//return;
				}
			}
		}
		if (PINL == 48) { //48 means down inputs&extract inputs all simultaneously LOW
			if (carriageIncludedWithPushers ==1) {
				if (PINA == 84 || PINA == 92 || PINA == 168 || PINA == 172 || PINA == 252) { //has vacuum and down
					releaseBothVac();
					while (PINA > 64) {
						Serial.println("vacuum is releasing");
					}
					Serial.println("vacuums released");
				} //looking for carriage to be down
				if (PINA < 64) {
					raiseCarriage();
					Serial.println("carriage is raising");
				}
				//return;
			}
			if (PIND >= 128 && PINA < 64) {// carriage up and no vacuum
				carriageIncludedWithPushers = 0;
				Serial.println("skipping VERIFY EXT AND CARRIAGE UP BECAUSE ALREADY THERE");
				pusherState = 4;
				break;
			}

			//Serial.print("Pushers are Retracting... Pushers are Retracting");
			//PORTK = PORTK & B10111111; //raiseCarriage
			pusherState++;
			Serial.print("PusherState is... ");
			Serial.println(pusherState);
		}
	case VERIFY_EXTENDED_AND_CARRIAGE_UP:
		Serial.print("Verifying.....   PusherState is... ");
		Serial.println(pusherState);
		leftRetractTripped = 0;
		rightRetractTripped = 0;
		if (PINL == 48 && PIND >128) {
			pusherState++;
			break;
		} 
		break;
	case RETRACT_PUSHERS:
		leftRetractTripped = 0;
		rightRetractTripped = 0;
		PORTC = PORTC | B00000010;  // this sets retraction to happen
		Serial.println("retract was reached");
		if ((leftRetractTripped + rightRetractTripped) == 2) {
			//Serial.println("exiting retract");
			pusherState++;
		}
		else {
			while ((leftRetractTripped + rightRetractTripped) != 2) {
				Serial.println(leftRetractTripped);
				Serial.println(rightRetractTripped);
			}
			//Serial.println("exiting retract");
			pusherState++;
		}
				
	case RAISE_PUSHERS:
		PORTC = PORTC | B00000011;
		leftRetractTripped = 0;
		rightRetractTripped = 0;
		pusherState++;
		bumpChain();
	case HOME_AND_VERIFY_PUSHERS:
	
		pusherCanRun = 0;
		while (PINL != 63) {
			//Serial.println("waiting for pushers to HOME");
			//Serial.println(PINL);
		}

		//if (steelOnChainsL == 0 && steelonChainsR == 0) {
			//forwardChain();
		//}
		//else {
		while (PIND != 136 || PIND != 137) {  // this should determine if bumpChain is needed
		}
		forwardChain();
		pusherState = 0;
		//}
		//checkChainMotor();
		//Serial.println("breaking out of pusherStateMachine");
		//loop();
		break;

		}
	}


/*
#define VERIFY_PUSHER_STATE 0
#define DROP_PUSHER 1
#define EXTEND_PUSHER 2
#define VERIFY_EXTENDED_AND_CARRIAGE_UP 3
#define RETRACT_PUSHERS 4
#define RAISE_PUSHERS 5
#define HOME_AND_VERIFY_PUSHERS 6*/

void getSteel() { // no vac is established... PINA < 64
	if (pusherState != 0) {
		return;
	}
	
	switch (PIND) {
		Serial.println(PIND);
	case 8 : // not up at conveyor released
		raiseCarriage();
		break;
	case 9: // not up at conveyor released
		raiseCarriage();
		break;
	case 136 :
		carriageToStack();
		break;
	case 137:
		carriageToStack();
		break;
	case 128: //empty carriage in between or traversing
		carriageToStack();
		break;
	case 129: //empty carriage in between or traversing
		carriageToStack();
		break;
	case 132 : //empty carriage up at stack
		lowerCarriage();
		break;
	case 133: //empty carriage up at stack
		lowerCarriage();
		break;
	case 4: // carriage down at stack
		if (PINA < 16) {
			return;

		}
		if (PINA >= 16) {
			Serial.println(PINA);
			activateBothVacs();
			verifyBothVacs();
			return;
		}


		if (vacVerified == 2) {
			deliverSteel();
			return;
		}
		if (vacVerified < 2) {
			determineCarriageState();
			return;
		}
		return;
	case 5 : // carriage down at stack
		if (PINA < 16) {
			return;
		}
		if (PINA >= 16) {
			Serial.println(PINA);
			activateBothVacs();
			verifyBothVacs();
			return;
		}


		if (vacVerified == 2) {
			deliverSteel();
			return;
		}
		if (vacVerified < 2) {
			determineCarriageState();
			return;
		}
		return;
	}
}

void deliverSteel() {
	//Serial.println("deliverSteel Reached");
	// raise carriage, to conveyor, await drop, drop carriage, verifyCarriageDown, releaseBothVac
	switch (PIND) {
	case 4: //down or rising at Stack
		verifyBothVacs();
		while (vacVerified != 2) {
			Serial.println("waiting for vacuum to establish");
			verifyBothVacs();
		}
		raiseCarriage();
		break;
	case 5: //down or rising at Stack
		verifyBothVacs();
		while (vacVerified != 2) {
			Serial.println("waiting for vacuum to establish");
			verifyBothVacs();
		}
		raiseCarriage();
		break;
	case 132: //up at stack loaded
		carriageToConveyor();
		break;
	case 133: //up at stack loaded
		carriageToConveyor();
		break;
	case 128: //up traversing
		carriageToConveyor();
		break;
	case 129: //up traversing
		carriageToConveyor();
		break;
	case 136: //up and at conveyor
		//Serial.println("waiting for chains");
		break;
	case 137: //up and at conveyor
	//Serial.println("waiting for chains");
		break;
	default:
		Serial.println("deliverSteel didn't match conditions");
		Serial.println(PIND);
		break;
	}
}
void determineCarriageState() {// based on vac test OR PINA determines if deliverSteel OR getSteel
	verifyBothVacs();
	//if (vacVerified == 2) {
		//vacVerified == 0; do you have to reset this?????????????????????????????????????????????????????????????
		if (PINA >= 240) {// full LR vac is estab
			deliverSteel();
			return;
		}
		if (PINA > 175 && PINA < 192) { //waiting for second vacuum to establish
			return;
		}
		if (PINA > 159 && PINA < 176) { // left carriage is loaded
			deliverSteel(); //maybe filter from within deliverSteel to prove right side missing
			return;
		}
		if (PINA > 111 && PINA < 128) { //waiting for second vacuum to establish
			return;
		}
		if (PINA > 79 && PINA < 96) { // right carriage is loaded
			deliverSteel(); //maybe filter from within deliverSteel to prove left side missing
			return;
		}
		if (PINA > 243 && PINA < 256) { //
			Serial.println("steel is on chains");
			return;

		}
		if (PINA < 64 && pusherState == 0) {
			Serial.println("getSteel is Reached");
			Serial.println(PIND);
			getSteel();
			return; //maybe no returns here???
		}
		if (PINA > 64) {
			verifyBothVacs();
			deliverSteel();
		}
		else {
			Serial.println("determine carriage state conditions not met");
			return;
		}
	}
//}
void carriageStateMachine() {

}
void bumpChain() {
	while (digitalRead(chainPosSensor) == 0) {
		PORTC = PORTC & B11111011;
	}
	PORTC = PORTC | B00000100;
}
// END functions here


void IR()
{
	//Serial.println("main loop has been reached");
	if (irrecv.decode(&results)) // have we received an IR signal?
	{
		//Serial.print(F("result = 0x"));
		//Serial.println(results.value, HEX); //UN Comment to see raw values
		translateIR();
		irrecv.resume(); // receive the next value
	}
}/* --(end IR loop )-- */
void translateIR() // takes action based on IR code received
{
	switch (results.value)
	{
	case 0xE318261B: {
		Serial.println(" E-Stop");
		PORTD = B10000000;
		EStop();
		return;
	case 0xFFA25D: Serial.println(" E-Stop");
		PORTD = B10000000;
		EStop();
		return;
	case 0xFFA25: Serial.println(" E-Stop");
		PORTD = B10000000;
		EStop();
		return; }
	case 0x511DBB: {Serial.println(" Manual Mode");
		PORTC = PORTC & B11011111;
		break;
	case 0xFF629D: Serial.println(" Manual Mode");
		PORTC = PORTC & B11011111;
		break;
	case 0xFF629: Serial.println(" Manual Mode");
		PORTC = PORTC & B11011111;
		break; }
	case 0xEE886D7F: { Serial.println(" Auto Mode");
		PORTC = PORTC | B00100000;
		break;
	case 0xFFE21D: Serial.println(" Auto Mode");
		PORTC = PORTC | B00100000;
		break;
	case 0xFFE21: Serial.println(" Auto Mode");
		PORTC = PORTC | B00100000;
		break; }
	case 0x52A3D41F: {Serial.println(" Stop Bridge");
		stopBridge();
		break;
	case 0xFF22DD: Serial.println(" Stop Bridge");
		stopBridge();
		break;
	case 0xFF22D: Serial.println(" Stop Bridge");
		stopBridge();
		break; }
	case 0xD7E84B1B: { Serial.println(" To Conveyor");
		if (PIND >= 128) {
			carriageToConveyor();
		}
		break;
	case 0xFF02FD: Serial.println(" To Conveyor");
		if (PIND >= 128) {
			carriageToConveyor();
		}
		break;
	case 0xFF02F: Serial.println(" To Conveyor");
		if (PIND >= 128) {
			carriageToConveyor();
		}
		break;
	}
	case 0x20FE4DBB: {Serial.println(" To Stack");
		if (PIND >= 128) {
			carriageToStack();
			//PORTD = B00000100;      WHAT IS THIS FOR????
			break;
		}
		else { break; }
	case 0xFFC23D: Serial.println(" To Stack");
		if (PIND >= 128) {
			carriageToStack();
			//PORTD = B00000100;
			break;
		}
		else { break; }
	case 0xFFC23: Serial.println(" To Stack");
		if (PIND >= 128) {
			carriageToStack();
			//PORTD = B00000100;
			break;
		}
		else { break; }
	case 0xF076C13B: Serial.println(" Home the Pusher");
		PORTC = PORTC | B00000010;
		break;
	case 0xFFE01F: Serial.println(" Home the Pusher");
		PORTC = PORTC | B00000010;
		break;
	case 0xFFE01: Serial.println(" Home the Pusher");
		PORTC = PORTC | B00000010;
		break;
	case 0xA3C8EDDB:{Serial.println(" LOWER Carriage");
		if (PIND >= 132) {
			lowerCarriage();
			break;
		}
		else {
			break;
		}
	case 0xFFA857: Serial.println(" LOWER Carriage");
		if (PIND >= 132) {
			lowerCarriage();
			break;
		}
		else {
			break;
		}
	case 0xFFA85: Serial.println(" LOWER Carriage");
		if (PIND >= 132) {
			lowerCarriage();
			break;
		}
		else {
			break;
		} }//lower carriage
	case 0xE5CFBD7F: { Serial.println(" RAISE Carriage");
		raiseCarriage();
		break;
	case 0xFF906F: Serial.println(" RAISE Carriage");
		raiseCarriage();
		break;
	case 0xFF906: Serial.println(" RAISE Carriage");
		raiseCarriage();
		break; }
	case 0xC101E57B: Serial.println(" PushPlate To"); break;
	case 0xFF6897: Serial.println(" PushPlate To"); break;
	case 0xFF689: Serial.println(" PushPlate To"); break;
	case 0x97483BFB: { Serial.println(" Release Vacuum");
		if (PIND == 4 || PIND == 8 || PIND == 5 || PIND == 9) {
			releaseBothVac();
		}
		break;
	case 0xFF9867:  Serial.println(" Release Vacuum");
		if (PIND == 4 || PIND == 8 || PIND == 5 || PIND == 9) {
			releaseBothVac();
		}
		break;
	case 0xFF986: Serial.println(" Release Vacuum");
		if (PIND == 4 || PIND == 8 || PIND == 5 || PIND == 9) {
			releaseBothVac();
		}
		break;
	}
	case 0xF0C41643: {Serial.println(" Activate All Vacuum");
		activateBothVacs();
		break;
	case 0xFFB04F: Serial.println(" Activate All Vacuum");
		activateBothVacs();
		break;
	case 0xFFB04: Serial.println(" Activate All Vacuum");
		activateBothVacs();
		break; }
	case 0x9716BE3F: {Serial.println(" Drop Pusher"); break;
	case 0xFF30CF: Serial.println(" Drop Pusher"); break;
	case 0xFF30C: Serial.println(" Drop Pusher"); break; }
	case 0xFF18E7: { Serial.println(" Activate Left Vacuum");
		leftVacActivate();
		break;
	case 0xFF18E: Serial.println(" Activate Left Vacuum");
		leftVacActivate();
		break;
	case 0x3D9AE3F7: Serial.println(" Activate Left Vacuum");
		leftVacActivate();
		break;
	}
	case 0x6182021B: {Serial.println(" Activate Right Vacuum");
		rightVacActivate();
		break;
	case 0xFF7A85: Serial.println(" Activate Right Vacuum");
		rightVacActivate();
		break;
	case 0xFF7A8: Serial.println(" Activate Right Vacuum");
		rightVacActivate();
		break; }
	case 0x8C22657B: {
		Serial.println(" stop chain");
		//stopChain();
		PORTC = PORTC | B00001100;
		break;
	case 0xFF10EF:
		Serial.println(" stop chain");
		//stopChain();
		PORTC = PORTC | B00001100;
		break;
	case 0xFF10E:
		Serial.println(" stop chain");
		//stopChain();
		PORTC = PORTC | B00001100;
		break; }
	case 0x488F3CBB: {
		Serial.println(" forward chain");
		forwardChain();
		break;
	case 0xFF38C7:
		Serial.println(" forward chain");
		forwardChain();
		break;
	case 0xFF38C:
		Serial.println(" forward chain");
		forwardChain();
		break; }
	case 0x449E79F: { Serial.println(" reverse chain");
		reverseChainInvokeTime = millis();
		Serial.println(reverseChainInvokeTime);
		reverseChain();
		break;
	case 0xFF5AA5: Serial.println(" reverse chain");
		reverseChainInvokeTime = millis();
		Serial.println(reverseChainInvokeTime);
		reverseChain();
		break;
	case 0xFF5AA: Serial.println(" reverse chain");
		reverseChainInvokeTime = millis();
		Serial.println(reverseChainInvokeTime);
		reverseChain();
		break; }
	case 0x32C6FDF7: Serial.println(" Diagnostics"); break;
	case 0xFF42BD: Serial.println(" Diagnostics"); break;
	case 0xFF42B: Serial.println(" Diagnostics"); break;
	case 0x1BC0157B: Serial.println(" Reset Microcontroller"); break;
	case 0xFF4AB5: Serial.println(" Reset Microcontroller"); break;
	case 0xFF4AB: Serial.println(" Reset Microcontroller"); break;
	case 0x3EC3FC1B: Serial.println(" Enter Manual Pusher Window"); break;
	case 0xFF52AD: Serial.println(" Enter Manual Pusher Window"); break;
	case 0xFF52A: Serial.println(" Enter Manual Pusher Window"); break;
		// case 0xFF52AD: Serial.println(" #"); break;
		// case 0xFFFFFFFF: Serial.println(" REPEAT");break; 
	default:
		Serial.println(" other button ");
	}
	}
	//delay(150); 
} //END translateIR
// The setup() function runs once each time the micro-controller starts
void setup()
{
	pinMode(chainPosSensor, INPUT_PULLUP);
	digitalWrite(chainPosSensor, HIGH);
	Serial.begin(115200);
	delay(250);
	Serial.println("IR Receiver Raw Data + Button Decode Test");
	irrecv.enableIRIn(); // Start the receiver
	//DDRD = DDRD | B1111110; //b128 redLED(pin38), b8 yellowLED(pin18), b4 greenLED(pin19), b2 inputEStopHardReset, b1 IRSignal
	//PORTD = B00000010; //b2 is PULLUP
	pinMode(eStopLight, OUTPUT);
	digitalWrite(eStopLight, LOW);

	DDRB = DDRB | B00000000; //13, 12, 11, 10, 50, 51, 52 ,53 all inputs
	PORTB = B11111111; // red dip switches... 
	DDRC = B11111111; //analog A7, A6, A5, A4, A3, A2, A1, A0 ALL OUTPUTS
	PORTC = B11101111;
	DDRD = B01110011;  //38, x, x, x, 18, 19, x20, x21
	PORTD = B10001100; //38 strictly carriage up, 18 (INT5) at conveyor, 19 (INT4) at stack, 
	DDRK = B11111111;
	PORTK = B11111111;
	DDRL = B11000000;
	PORTL = B00111111;
	DDRA = B00000011;  // 6 MSB are inputs
	PORTA = B11111100;  // only 6 MSbits are being used
	DDRJ = B11111110;  //set pins 14 and 15 as inputs 15=binary1, 14=binary2
	PORTJ = B00000001; //set pins 14 and 15 to input pullups
	//pinMode(18, INPUT_PULLUP);
	//attachInterrupt(5, pusherStateMachine, FALLING);
	pinMode(7, OUTPUT);
	digitalWrite(7, LOW);
	pinMode(8, OUTPUT);
	digitalWrite(8, LOW);
	pinMode(9, OUTPUT);
	digitalWrite(9, LOW);
	pinMode(2, INPUT_PULLUP); // retracting pass proximity sensor for interrupt
	pinMode(3, INPUT_PULLUP); // retracting pass proximity sensor for interrupt
	digitalWrite(2, HIGH);
	digitalWrite(3, HIGH);
	pinMode(21, INPUT_PULLUP);
	digitalWrite(21, HIGH);
	//pinMode(19, INPUT_PULLUP);  //at stack interrupt to stop bridge motor
	//digitalWrite(19, HIGH);
	//pinMode(18, INPUT_PULLUP);  //at conveyor interrupt to stop bridge motor
	//digitalWrite(18, HIGH);

	attachInterrupt(0, pusherCanRaiseFlagL, FALLING);
	attachInterrupt(1, pusherCanRaiseFlagR, FALLING);
	attachInterrupt(5, stopBridgeAtConveyor, RISING);
	attachInterrupt(4, stopBridgeAtStack, RISING);
	attachInterrupt(2, autoPusherStateMachine, FALLING);
	delay(1000);

	initializeOutputs();
	Serial.println("should be initialized");
}

// Add the main program code into the continuous loop() function
void loop() {
	/*
	1x check and set the outputs based on what it reads
	determine vac state whether both, left or right
		vacStateMachine();
	determin carriage state, getSteel, deliverSteel,
		carriageStateMachine();
	determineIfPusherState
		stopChainInterrupt
	*/
	//initializeOutputs();






	while (PINB <= 127) {
		IR();
		//Serial.print("PIND is       ");
		//Serial.println(PIND);
		
		if (PINB >= 96 && PINB < 112){
			mode = FULL_AUTO;
			
		}
		if (PINB > 63 && PINB < 80){
			mode = HALF_AUTO_LEFT;
			
		}
		if (PINB > 31 && PINB < 48){
			mode = HALF_AUTO_RIGHT;
			
		}
		else if(PINB == 48 || PINB == 80 || PINB == 112 || PINB == 0 || PINB == 16) {
			mode = MANUAL;
		}
		if (PING == 0) {
			stopChain();
		}
		determineCarriageState();
		pinChangePrintStatement();
		//Serial.println(millis());
	}
	EStop();
}
/*
PINA CHECKS OUT with internal pullups
PINB CHECKS OUT with internal pullups
PIND CHECKS OUT with internal pullups
PINL is least significant bits  1,2 for LR down; 4,8 for LR full extension
PINE 

#define FULL_AUTO 1
#define HALF_AUTO_LEFT 2
#define HALF_AUTO_RIGHT 3
#define MANUAL 4
*/
